/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   lib/utils/attribute-capitalization-mixin.html
 */

/// <reference path="boot.d.ts" />
/// <reference path="mixin.d.ts" />
/// <reference path="../mixins/property-effects.d.ts" />

declare namespace Polymer {


  /**
   * Mixin that uses an heuristic to determine the capitalization of HTML
   * attributes. By default, all attributes are lowercased. However, some
   * native attributes have capitalization. `Element.attributes` only returns
   * capitalized attributes if the attribute name is exactly equal to the attribute.
   * In other words, `viewBox$` will be lowercased to `viewbox$`. Therefore, if
   * an attribute name still has capitaliation, we use an attribute effect to
   * update the bindings.
   */
  function AttributeCapitalization<T extends new (...args: any[]) => {}>(base: T): T & AttributeCapitalizationConstructor & Polymer.PropertyEffectsConstructor & Polymer.TemplateStampConstructor & Polymer.PropertyAccessorsConstructor & Polymer.PropertiesChangedConstructor;

  interface AttributeCapitalizationConstructor {
    new(...args: any[]): AttributeCapitalization;

    /**
     * Overrides default `PropertyEffects` implementation to automatically
     * detect capitalized attributes.
     *
     * @param node Node to parse
     * @param templateInfo Template metadata for current template
     * @param nodeInfo Node metadata for current template node
     * @returns `true` if the visited node added node-specific
     *   metadata to `nodeInfo`
     */
    _parseTemplateNodeAttribute(node: Node|null, templateInfo: TemplateInfo|null, nodeInfo: NodeInfo|null, name: any, value: any): boolean;
  }

  interface AttributeCapitalization {
  }
}
